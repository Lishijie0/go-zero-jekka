// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	jkThirdProductFieldNames          = builder.RawFieldNames(&JkThirdProduct{})
	jkThirdProductRows                = strings.Join(jkThirdProductFieldNames, ",")
	jkThirdProductRowsExpectAutoSet   = strings.Join(stringx.Remove(jkThirdProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	jkThirdProductRowsWithPlaceHolder = strings.Join(stringx.Remove(jkThirdProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	jkThirdProductModel interface {
		Insert(ctx context.Context, data *JkThirdProduct) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*JkThirdProduct, error)
		Update(ctx context.Context, data *JkThirdProduct) error
		Delete(ctx context.Context, id int64) error
	}

	defaultJkThirdProductModel struct {
		conn  sqlx.SqlConn
		table string
	}

	JkThirdProduct struct {
		Id           int64          `db:"id"`           // 主键ID
		JkShopId     int64          `db:"jk_shop_id"`   // jekka店铺ID
		ProductId    string         `db:"product_id"`   // 产品 ID
		Title        string         `db:"title"`        // 产品标题
		Description2 sql.NullString `db:"description2"` // 产品描述
		MinPrice     float64        `db:"min_price"`    // 最小价格
		MaxPrice     float64        `db:"max_price"`    // 最大价格
		Handle       sql.NullString `db:"handle"`       // Handel字段 shopify 专用
		Options      sql.NullString `db:"options"`      // 选项
		Currency     string         `db:"currency"`     // 货币代码
		Skus         sql.NullString `db:"skus"`         // sku集合信息
		StockStatus  int64          `db:"stock_status"` // 库存状态
		PreOrder     int64          `db:"pre_order"`    // 是否预售;0:非预售;1:预售
		CategoryId   sql.NullInt64  `db:"category_id"`  // 商品分类 id
		Url          sql.NullString `db:"url"`          // 商品 url
		ImageUrl     sql.NullString `db:"image_url"`    // 缩略图 url
		SellerSkus   sql.NullString `db:"seller_skus"`  // skus名称集合字符，es查询使用
		SkuIds       sql.NullString `db:"sku_ids"`      // skusId集合字符，es查询使用
		CreateTime   time.Time      `db:"create_time"`  // 商品创建时间戳
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    time.Time      `db:"updated_at"`
		Test         sql.NullString `db:"test"`
	}
)

func newJkThirdProductModel(conn sqlx.SqlConn) *defaultJkThirdProductModel {
	return &defaultJkThirdProductModel{
		conn:  conn,
		table: "`jk_third_product`",
	}
}

func (m *defaultJkThirdProductModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultJkThirdProductModel) FindOne(ctx context.Context, id int64) (*JkThirdProduct, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", jkThirdProductRows, m.table)
	var resp JkThirdProduct
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJkThirdProductModel) Insert(ctx context.Context, data *JkThirdProduct) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, jkThirdProductRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.JkShopId, data.ProductId, data.Title, data.Description2, data.MinPrice, data.MaxPrice, data.Handle, data.Options, data.Currency, data.Skus, data.StockStatus, data.PreOrder, data.CategoryId, data.Url, data.ImageUrl, data.SellerSkus, data.SkuIds, data.Test)
	return ret, err
}

func (m *defaultJkThirdProductModel) Update(ctx context.Context, data *JkThirdProduct) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, jkThirdProductRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.JkShopId, data.ProductId, data.Title, data.Description2, data.MinPrice, data.MaxPrice, data.Handle, data.Options, data.Currency, data.Skus, data.StockStatus, data.PreOrder, data.CategoryId, data.Url, data.ImageUrl, data.SellerSkus, data.SkuIds, data.Test, data.Id)
	return err
}

func (m *defaultJkThirdProductModel) tableName() string {
	return m.table
}
