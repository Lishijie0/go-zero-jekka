// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: third.proto

package third

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdClient is the client API for Third service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdClient interface {
	// 查询商品详情
	ProductDetail(ctx context.Context, in *ProductDetailReq, opts ...grpc.CallOption) (*ProductDetailResp, error)
	// 店铺商品列表
	ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
}

type thirdClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdClient(cc grpc.ClientConnInterface) ThirdClient {
	return &thirdClient{cc}
}

func (c *thirdClient) ProductDetail(ctx context.Context, in *ProductDetailReq, opts ...grpc.CallOption) (*ProductDetailResp, error) {
	out := new(ProductDetailResp)
	err := c.cc.Invoke(ctx, "/third.Third/productDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdClient) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, "/third.Third/productList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdServer is the server API for Third service.
// All implementations must embed UnimplementedThirdServer
// for forward compatibility
type ThirdServer interface {
	// 查询商品详情
	ProductDetail(context.Context, *ProductDetailReq) (*ProductDetailResp, error)
	// 店铺商品列表
	ProductList(context.Context, *ProductListReq) (*ProductListResp, error)
	mustEmbedUnimplementedThirdServer()
}

// UnimplementedThirdServer must be embedded to have forward compatible implementations.
type UnimplementedThirdServer struct {
}

func (UnimplementedThirdServer) ProductDetail(context.Context, *ProductDetailReq) (*ProductDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetail not implemented")
}
func (UnimplementedThirdServer) ProductList(context.Context, *ProductListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedThirdServer) mustEmbedUnimplementedThirdServer() {}

// UnsafeThirdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdServer will
// result in compilation errors.
type UnsafeThirdServer interface {
	mustEmbedUnimplementedThirdServer()
}

func RegisterThirdServer(s grpc.ServiceRegistrar, srv ThirdServer) {
	s.RegisterService(&Third_ServiceDesc, srv)
}

func _Third_ProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdServer).ProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.Third/productDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdServer).ProductDetail(ctx, req.(*ProductDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Third_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.Third/productList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdServer).ProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Third_ServiceDesc is the grpc.ServiceDesc for Third service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Third_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "third.Third",
	HandlerType: (*ThirdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "productDetail",
			Handler:    _Third_ProductDetail_Handler,
		},
		{
			MethodName: "productList",
			Handler:    _Third_ProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "third.proto",
}
